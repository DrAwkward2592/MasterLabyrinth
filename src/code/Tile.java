package code;

import java.util.ArrayList;

/**
 * Defines a tile to be used in a game of Master Labyrinth.  A tile has the ability to be rotated and has
 *  directional member variables representing the path on the face of the tile, which are used to compare to
 *  adjacent tiles to determine pathing.  A tile can have a token, and keeps track of whether or not it has a token.  It can also have
 *  between 0-4 Players on it, and keeps track of whether or not it has any Players on it.
 *  
 *  If a tile's directional boolean values are set to true, it means there is a path leading off of that tile.
 *  
 *  e.g.  a tile whose booleans values are true,true,false,false would resemble:
 *  	 NORTH
 *  	---*---
 *  	|  *  |
 *  	|  **** EAST
 *  	|     |
 *  	-------
 * 
 * @author team112
 * @version 1.0
 */
public class Tile {
	private boolean _north,_east,_south,_west;
	private boolean _hasToken = false;
	private Token _token = null; //only one token can be on each tile
	private ArrayList<Player> _players; //since multiple players can be on same tile

	/**
	 * Creates a tile for use in a game of Master Labyrinth.  
	 *
	 * @param north this tile's "north" value
	 * @param east this tile's "east" value
	 * @param south this tile's "south" value
	 * @param west this tile's "west" value
	 */
	public Tile(boolean north,boolean east, boolean south, boolean west){
		_north = north;
		_south = south;
		_east = east;
		_west = west;
		_players = new ArrayList<Player>();
	}
	/**
	 * Accessor for this tile's north value used for comparisons between tiles in pathfinding.
	 * 
	 * @return  the boolean representing the tile's north value.
	 */
	public boolean getNorth(){return _north;}
	/** Accessor for this tile's south value used for comparisons between tiles in pathfinding.
	 * 
	 * @return the boolean representing the tile's south value.
	 */
	public boolean getSouth(){return _south;}
	/** Accessor for this tile's east value used for comparisons between tiles in pathfinding.
	 * 
	 * @return the boolean representing the tile's east value.
	 */
	public boolean getEast(){return _east;}
	/** Accessor for this tile's west value used for comparisons between tiles in pathfinding.
	 * 
	 * @return the boolean representing the tile's west value.
	 */
	public boolean getWest(){return _west;}

	/** Rotates a tile 90 degrees clockwise by means of changing its directional member variables.
	 * 
	 */
	public void rotate(){
		boolean temp = _north;
		_north = _west;
		_west = _south;
		_south = _east;
		_east = temp;
	}

	/** Accessor for whether or not this tile has a token on it.
	 * 
	 * @return boolean representing whether this tile has a token on it
	 */
	public boolean hasToken() {
		return _hasToken;
	}
	/** Adds a Token to this tile.
	 * 
	 * @param t the Token to be added.
	 */
	public void setToken(Token t) {
		_token = t;
		_hasToken = true;
	}
	/**
	 * Returns the token on a tile
	 * @return
	 */
	public Token getToken() {
		return _token;
	}
	/**
	 * Removes a token from this tile and sets the tile's corresponding value to false. 
	 */
	public void removeToken(){
		_hasToken = false;
		_token = null;
	}
	/** Auto generated by eclipse for testing purposes.
	 * 
	 */
	@Override
	public String toString() {
		return "Tile [_north=" + _north + ", _east=" + _east + ", _south=" + _south + ", _west=" + _west + "]";
	}
	/** Auto generated by eclipse for testing purposes.  Checks for equality based on NESW values of tile.  
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Tile other = (Tile) obj;
		if (_east != other._east)
			return false;
		if (_north != other._north)
			return false;
		if (_south != other._south)
			return false;
		if (_west != other._west)
			return false;
		return true;
	}


	public boolean hasPlayer(){
		if(_players.isEmpty()){
			return false;
		}
		return true;
	}
	public void setPlayer(Player p){
		_players.add(p);
	}
	public void removePlayer(Player p){
		_players.remove(p);
	}
}
